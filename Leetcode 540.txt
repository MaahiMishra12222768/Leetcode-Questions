Leetcode 540 

//using bitwise operator 
//TC - o(n)
class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        int a = nums[0] ; 
        int i = 1 ; 
        int n = nums.size();
        while(i < n ){
            a = a ^ nums[i];
            i++;

        }
        return a ; 
        
    }
};


//Optimized solution 
//using binary search
//TC - O(logn)
//SC - O(1)

class Solution {
public:
    int singleNonDuplicate(vector<int>& nums){
        int st = 0;
        int n = nums.size();
        int end = n - 1 ; 
        if(n==1){
            return nums[0];
        }
        
        while(st<= end){
            int mid = st +( end - st )/2;
            if(mid== 0 && nums[0] != nums[1]){
                return nums[mid];
            }
            if(mid == n-1 && nums[n-1] != nums[n-2] ){
                return nums[mid];
            }
            if(nums[mid] != nums[mid-1]  && nums[mid] != nums[mid+1]){
                return nums[mid] ; 
            }
            else if ( mid % 2 == 0 ){
                if(nums[mid-1] == nums[mid]){
                    end = mid -1 ; 
                }
                else{
                    st = mid+1;
                }
            }
            else{
                if(nums[mid] == nums[mid-1]){
                    st = mid+1;
                }
                else{
                    end = mid -1 ; 
                }
            }

        }
        return 0 ; 
        
    }
};

 
